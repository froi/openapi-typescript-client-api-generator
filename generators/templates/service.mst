/**
 * {{apiInfo.name}} {{apiInfo.version.api}} (OpenAPI: {{apiInfo.version.openApi}})
 * {{{apiInfo.description}}}
 *
 * NOTE: This class is auto generated by openapi-typescript-client-api-generator.
 * Do not edit the file manually.
 */

import axios from "axios";

import { ServiceBase } from "{{{relativeServiceBasePath}}}/serviceBase";
import { I{{name}} } from "./{{fileName}}.interface";

{{#usedTypes}}
import { {{name}} } from "{{{relativeModelsPath}}}/{{{fileName}}}";
{{/usedTypes}}
{{#usedRequestBodies}}
import { {{name}} as {{name}}RequestBody } from "{{{relativeModelsPath}}}/requestBodies/{{{fileName}}}";
{{/usedRequestBodies}}

export class {{name}} extends ServiceBase implements I{{name}} {
{{#endpoints}}
    /**
{{#description}}
     * {{{.}}}
     *
{{/description}}
{{#parameters}}
     * @param {{=<% %>=}}{<%type%><%#isBody%>RequestBody<%/isBody%>}<%={{ }}=%> {{^required}}[{{/required}}{{name}}{{^required}}]{{/required}} {{{description}}}
{{/parameters}}
     */
    public async {{name}}({{#parameters}}{{name}}{{^required}}?{{/required}}: {{type}}{{#isBody}}RequestBody{{/isBody}}{{^isLastParam}}, {{/isLastParam}}{{/parameters}}): Promise<{{returnType}}> {
        const config = this.getAxiosConfiguration();

{{#hasQueryParameters}}
        const queryList: string[] = [];
{{#queryParameters}}
        if ({{name}} !== undefined) {
            queryList.push(`{{name}}=${{=<% %>=}}{<%name%>}<%={{ }}=%>`);
        }
{{/queryParameters}}
        const query = `?${queryList.join("&")}`;

{{/hasQueryParameters}}
        const response = await axios.{{#isGet}}get{{/isGet}}{{#isPost}}post{{/isPost}}{{#isPut}}put{{/isPut}}{{#isDelete}}delete{{/isDelete}}<{{returnType}}>(`{{{path}}}{{#hasQueryParameters}}${query}{{/hasQueryParameters}}`,{{#body}} body,{{/body}} config);
{{^returnTypeIsArray}}

{{#subReturnTypes}}
        if (response.data.discriminator === "{{name}}") {
            const data = response.data as {{name}};
            return new {{name}}({{#supertype}}{{#properties}}data.{{name}}, {{/properties}}{{/supertype}}{{#properties}}data.{{name}}{{^isLast}}, {{/isLast}}{{/properties}});
        }
{{/subReturnTypes}}

{{/returnTypeIsArray}}
{{#returnTypeIsArray}}

        response.data = response.data.map(item => {
{{#subReturnTypes}}
            if (item.discriminator === "{{name}}") {
                const data = item as {{name}};
                return new {{name}}({{#supertype}}{{#properties}}data.{{name}}, {{/properties}}{{/supertype}}{{#properties}}data.{{name}}{{^isLast}}, {{/isLast}}{{/properties}});
            }
{{/subReturnTypes}}
            return item;
        });

{{/returnTypeIsArray}}
        return response.data;
    }
{{^isLast}}

{{/isLast}}
{{/endpoints}}
}